 //version = '2.0.0'

apply plugin: 'java-library'

repositories {
    jcenter()
}

dependencies {
	compile 'commons-validator:commons-validator:1.6'
    compile 'com.couchbase.lite:couchbase-lite-java:1.4.0'
    compile 'org.glassfish.jersey.core:jersey-client:2.25.1'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}


// build production client
task buildProduction {
    dependsOn 'build'
    dependsOn 'uiJar'
    tasks.findByName('buildProduction').mustRunAfter 'uiJar'
    
    doLast {
        delete(buildDirProd);
        copyFiles("dependencies", buildDirProd + installDir + "lib")
        copyFiles("scripts", buildDirProd)
        copyFiles("install", buildDirProd + installExtras)
        copyFiles("config/logging.properties", buildDirProd + installDir)
        copyFiles("build/libs/Passvault-core.jar", buildDirProd + installDir + "lib")
        copyFiles("build/libs/Passvault-jsonStore-db.jar", buildDirProd + installDir + "lib")
        copyFiles("build/libs/Passvault-ui.jar", buildDirProd + installDir + "lib")
        copyFiles("build/libs/Passvault-androidBase64.jar", buildDirProd + installDir + "lib")
		copyFiles("build/libs/Passvault-core.jar", androidDependencyDir)
		copyFiles("build/libs/Passvault-jsonStore-db.jar", androidDependencyDir)
        //copyFiles("build/libs/Passvault-ui.jar", androidDependencyDir)
}
}


task createJsonRelease(type: Zip) {
    dependsOn 'buildProduction'
    tasks.findByName('createJsonRelease').mustRunAfter 'buildProduction'
    archiveName = 'passvault-json-db-' + version + '.zip'
    
    from(buildDirProd) {
        exclude('dist/**')
        exclude('.passvault/lib/Passvault-couchbase-db.jar')
        exclude('.passvault/lib/couchbase-*')
    }
    destinationDir file(buildDirProd + "dist")
}


task createCouchbaseRelease(type: Zip) {
    dependsOn 'buildProduction'
    tasks.findByName('createCouchbaseRelease').mustRunAfter 'buildProduction'
    archiveName = 'passvault-couchbaseLite-db-' + version + '.zip'
    
    from(buildDirProd) {
        exclude('dist/**')
        exclude('.passvault/lib/Passvault-json-db.jar')
    }
    destinationDir file(buildDirProd + "dist")
}


// FIX ADD Resources ssl/jks
task coreJar(type: Jar) {
    dependsOn 'build'
    dependsOn 'clean'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('coreJar').mustRunAfter 'build'
    archiveName = project.name + '-core.jar'
    //from('build/classes/main', 'src/resources') {
    from('src/resources') {
        include '**'
    }
    from('build/classes/main') {
        include 'com/passvault/**'
        exclude('com/passvault/ui/**')
        exclude('com/passvault/tools/**')
        exclude('com/passvault/util/data/file/**')
        exclude('com/passvault/util/data/couchbase/**')
    }
}


task uiJar(type: Jar) {
    dependsOn 'androidB64Jar'
    tasks.findByName('uiJar').mustRunAfter 'androidB64Jar'
    archiveName = project.name + '-ui.jar'
    from('build/classes/main') {
        include('com/passvault/ui/**')
        include('com/passvault/tools/**')
    }
}

task jsonStoreJar(type: Jar) {
    dependsOn 'coreJar'
    tasks.findByName('jsonStoreJar').mustRunAfter 'coreJar'
    archiveName = project.name + '-jsonStore-db.jar'
    from('build/classes/main') {
        include('com/passvault/util/data/file/**')
    }
}

task couchbaseStoreJar(type: Jar) {
    dependsOn 'jsonStoreJar'
    tasks.findByName('couchbaseStoreJar').mustRunAfter 'jsonStoreJar'
    archiveName = project.name + '-couchbase-db.jar'
    from('build/classes/main') {
        include('com/passvault/util/data/couchbase/**')
    }
}

task androidB64Jar(type: Jar) {
    dependsOn 'couchbaseStoreJar'
    tasks.findByName('androidB64Jar').mustRunAfter 'couchbaseStoreJar'
    archiveName = project.name + '-androidBase64.jar'
    from('build/classes/main') {
        include('android/util/**')
    }
}


/*
 * Utility Methods/Tasks
*/

void copyFiles(String src, String dst) {
    copy {
            from src
            into dst
        }
}

uploadArchives {
    repositories {
       flatDir {
           dirs '/opt/repos/passvault'
       }
    }
}


// run to get any dependent libraries into one directory
task copyDependencies(type: Copy) {
   from configurations.compile
   into 'dependencies'
}
